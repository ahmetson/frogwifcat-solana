import { OFT_SEED, OftTools, OftProgram as oft } from "@layerzerolabs/lz-solana-sdk-v2";
import {addressToBytes32, Options} from '@layerzerolabs/lz-v2-utilities';
import { EndpointId } from '@layerzerolabs/lz-definitions'
import { Connection, Keypair, PublicKey, Transaction, clusterApiUrl, sendAndConfirmTransaction } from "@solana/web3.js";

import fs from 'fs';
import 'dotenv/config';

const connection = new Connection(clusterApiUrl("testnet"), "confirmed");

const PAYER_KEY_BYTES = fs.readFileSync(process.env.PAYER_PATH!);
const payer = Keypair.fromSecretKey(new Uint8Array(JSON.parse(PAYER_KEY_BYTES.toString())));

// This is generated by app/app.ts
const pubKey = 'BLKJh8iyLnPBAw11M1BrwoeKkvN6aDBcbf1MmEEfgL3z';
const mintKeypairPath = `${process.env.KEYS_PATH}${pubKey}.json`;
const MINT_KEY_BYTES = fs.readFileSync(mintKeypairPath!);
const mintKeypair = Keypair.fromSecretKey(new Uint8Array(JSON.parse(MINT_KEY_BYTES.toString())));


function generateExplorerUrl(txId: string) {
    return `https://explorer.solana.com/tx/${txId}?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899`;
}

// 11155111: "0x32ce985bCab4961394A9167D15F5d509D6F23f06", // sepolia
// 59141: "0xe40c7856B6D0e1B01dECBF9976BB706B9Cd1229f", // linea sepolia
// 84532: "0xe40c7856B6D0e1B01dECBF9976BB706B9Cd1229f", // "base sepolia"

const [oftConfig] = PublicKey.findProgramAddressSync(
    [Buffer.from(OFT_SEED), mintKeypair.publicKey.toBuffer()],
    oft.OFT_DEFAULT_PROGRAM_ID, // Default program id is on devnet
);

const peers = [
    {dstEid: EndpointId.SEPOLIA_V2_TESTNET, peerAddress: addressToBytes32("0x32ce985bCab4961394A9167D15F5d509D6F23f06")},
    {dstEid: EndpointId.LINEASEP_V2_TESTNET, peerAddress: addressToBytes32("0xe40c7856B6D0e1B01dECBF9976BB706B9Cd1229f")},
    {dstEid: EndpointId.BASESEP_V2_TESTNET, peerAddress: addressToBytes32("0xe40c7856B6D0e1B01dECBF9976BB706B9Cd1229f")},
]

async function main() {
    console.log(oftConfig);

    for (const peer of peers) {
        const peerTransaction = new Transaction().add(
            await OftTools.createSetPeerIx(
                payer.publicKey,
                oftConfig,
                peer.dstEid,
                Array.from(peer.peerAddress),
            ),
            // await OftTools.createSetEnforcedOptionsIx(
            //     payer.publicKey, // your admin address
            //     oftConfig, // your OFT Config
            //     peer.dstEid, // destination endpoint id for the options to apply to
            //     Options.newOptions().addExecutorLzReceiveOption(75000, 0).toBytes(), // send options
            //     Options.newOptions()
            //       .addExecutorLzReceiveOption(75000, 0)
            //       .addExecutorComposeOption(0, 70000, 0)
            //       .toBytes(), // sendAndCall options
            // ),
        );

        const peerSignature = await sendAndConfirmTransaction(connection, peerTransaction, [payer]);
        const link = generateExplorerUrl(peerSignature)
        console.log(
            `âœ… You set ${await OftTools.getPeerAddress(connection, oftConfig, peer.dstEid)} for dstEid ${
            peer.dstEid
            }! View the transaction here: ${link}`,
        );
    }

}
console.log(`Starting the set_peer.ts...`);

// Execute the main function
main();